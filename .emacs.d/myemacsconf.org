#+title: 我的Emacs配置
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-04-17 Fri>
#+export_file_name: ~/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/m-dark.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,400i,600%7CSource+Sans+Pro:400,400i,600&amp;subset=latin-ext" />
#+HTML_HEAD_EXTRA: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#+OPTIONS: html-style:nil
* Preview
[[https://s1.ax1x.com/2020/03/29/GVOav9.png]]
[[https://s1.ax1x.com/2020/03/29/GVON34.png]]
* Is A?
  #+BEGIN_SRC emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
  #+END_SRC
* 初始化 straight.el 插件管理
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
* 预下载基础包
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (straight-use-package 'posframe)
  (straight-use-package 'vterm)
  (straight-use-package 'htmlize)
#+end_src
* 载入启动界面
  #+BEGIN_SRC emacs-lisp
    (straight-use-package 'dashboard)
    (use-package dashboard
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-banner-logo-title ";;; Happy Hacking Keke , Emacs Love You ~")
    ;;  (setq dashboard-startup-banner "~/.emacs.d/logo.png")
      (setq dashboard-set-heading-icons t)
      (setq dashboard-items '((recents  . 5)
			    (agenda . 5)))
      (setq dashboard-set-file-icons t))

  #+END_SRC
* 主程序的一些设置
** UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-linum-mode 1)
 ;; (setq inhibit-startup-message t)
  (global-hl-line-mode t)
#+end_src
*** doom-modeline
#+begin_src emacs-lisp
    (straight-use-package 'doom-modeline)
    (use-package doom-modeline
      :init (doom-modeline-mode 1))
    (straight-use-package 'nyan-mode)
    (use-package nyan-mode
      :init (setq nyan-animate-nyancat t
		   nyan-bar-length 16
		   nyan-wavy-trail t)
      :hook ((after-init . nyan-mode)))
#+end_src
*** doom-themes
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'doom-themes)
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-wilmersdorf t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
  
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)
  
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
** 透明度
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist'(ns-appearance . dark))
  (add-to-list 'default-frame-alist'(alpha . (80 . 75)))
#+end_src
** 默认功能设置
#+begin_src emacs-lisp
  ;; 自动加载外部修改过的文件
  (global-auto-revert-mode 1)
  ;; 关闭自己生产的保存文件
  (setq auto-save-default nil)
  ;; 关闭自己生产的备份文件
  (setq make-backup-files nil)
  ;; 选中某个区域继续编辑可以替换掉该区域
  (delete-selection-mode 1)
  ;; 设置h 文件默认为c++文件
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src
** 字体
#+begin_src emacs-lisp
  (when *is-a-mac*
  (set-frame-font "Operator Mono 16"))
  (when *is-a-linux*
    (set-frame-font "Operator Mono 12"))
  (if (version< "27.0" emacs-version)
	     (set-fontset-font
	      "fontset-default" 'unicode "Noto Color Emoji" nil 'prepend)
	   (set-fontset-font
	    t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
#+end_src

* 包的配置
** yasnippet
#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)
  (use-package yasnippet
    :commands
    (yas-reload-all)
    :init
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src
** company
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'company)
     (use-package 
       company 
       :defer 2 
       :hook (after-init . global-company-mode) 
       :init (setq company-tooltip-align-annotations t company-idle-delay 0 company-echo-delay 0
		   company-minimum-prefix-length 1 company-require-match nil company-dabbrev-ignore-case
		   nil company-dabbrev-downcase nil company-show-numbers t) 
       :config 
       :bind (:map company-active-map
		   ("M-n" . nil) 
		   ("M-p" . nil) 
		   ("C-n" . #'company-select-next) 
		   ("C-p" . #'company-select-previous)))
   #+END_SRC
** IVY all
#+begin_src emacs-lisp
  (straight-use-package 'ivy)
  (straight-use-package 'counsel)
  (straight-use-package 'swiper)
  (straight-use-package 'all-the-icons-ivy-rich)
  (use-package ivy
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))
  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src
** magit
   #+BEGIN_SRC emacs-lisp
   (straight-use-package 'magit)
   #+END_SRC
** rime
   #+BEGIN_SRC emacs-lisp
     (use-package rime
		  :straight (rime :type git
				  :host github
				  :repo "DogLooksGood/emacs-rime"
				  :files ("*.el" "Makefile" "lib.c"))
		  :custom
		  (rime-show-candidate 'posframe)
		  (default-input-method "rime"))
     (when *is-a-mac*
       (use-package rime
		    :custom
		    (rime-librime-root "~/.emacs.d/librime/dist")))
   #+END_SRC
** xah_fly_keys
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'xah-fly-keys)
     (use-package xah-fly-keys
       :config
       (xah-fly-keys-set-layout 'qwerty)
       (xah-fly-keys 1))
   #+END_SRC 
** which_key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode)
   #+end_src
  
** lsp
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)
     (straight-use-package 'lsp-ui)
     (straight-use-package 'lsp-ivy)
     (straight-use-package 'lsp-treemacs)
     (straight-use-package 'which-key)

     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
     (setq lsp-keymap-prefix "s-l")

     (use-package lsp-mode
	 :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
		 (html-mode . lsp)
		 (css-mode . lsp)
		 (js-mode . lsp)
		 ;; if you want which-key integration
		 (lsp-mode . lsp-enable-which-key-integration))
	 :commands lsp)

     ;; optionally
     (use-package lsp-ui :commands lsp-ui-mode)
     ;; if you are ivy user
     (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
     (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
     ;; optional if you want which-key integration
     (use-package which-key
	 :config
	 (which-key-mode))
   #+end_src
* Org-mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  #+END_SRC
* 键位配置
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c p") 'keke-run-current-file)
  ;;IVY
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
* 一些好用的函数
** keke-run-current-file
   #+BEGIN_SRC emacs-lisp
     (defvar keke-run-current-file-before-hook nil "Hook for `keke-run-current-file'. Before the file is run.")
     (defvar keke-run-current-file-after-hook nil "Hook for `keke-run-current-file'. After the file is run.")
     (defun keke-run-current-file ()
       (interactive)
       (let (
	     ($outputb "*keke-run output*")
	     (resize-mini-windows nil)
	     ($suffix-map
	      `(
		("ts" . "node")
		("py" . "python")
		("html" . "firefox")
		))
		$fname
		$fSuffix
		$prog-name
		$cmd-str)
	      (when (not (buffer-file-name)) (save-buffer))
	      (when (buffer-modified-p) (save-buffer))
	      (setq $fname (buffer-file-name))
	      (setq $fSuffix (file-name-extension $fname))
	      (setq $prog-name (cdr (assoc $fSuffix $suffix-map)))
	      (setq $cmd-str (concat $prog-name " \""   $fname "\" &"))
	      (run-hooks 'keke-run-current-file-before-hook)
	      (if $prog-name
		  (progn
		    (message "Running")
		    (shell-command $cmd-str $outputb ))
		(error "No recognized program file suffix for this file."))))
     (run-hooks 'keke-run-current-file-after-hook)
   #+END_SRC
** keke-html-open-in-chrome-browser
   #+BEGIN_SRC emacs-lisp
     (defun keke-html-open-in-chrome-browser ()
       "Open the current file or `dired' marked files in Google Chrome browser.
     Work in Windows, macOS, linux.
     URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
     Version 2019-11-10"
       (interactive)
       (let* (
	      ($file-list
	       (if (string-equal major-mode "dired-mode")
		   (dired-get-marked-files)
		 (list (buffer-file-name))))
	      ($do-it-p (if (<= (length $file-list) 5)
			    t
			  (y-or-n-p "Open more than 5 files? "))))
	 (when $do-it-p
	   (cond
	    ((string-equal system-type "darwin")
	     (mapc
	      (lambda ($fpath)
		(shell-command
		 (format "open -a /Applications/Google\\ Chrome.app \"%s\"" $fpath)))
	      $file-list))
	    ((string-equal system-type "windows-nt")
	     ;; "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" 2019-11-09
	     (let ((process-connection-type nil))
	       (mapc
		(lambda ($fpath)
		  (start-process "" nil "powershell" "start-process" "chrome" $fpath ))
		$file-list)))
	    ((string-equal system-type "gnu/linux")
	     (mapc
	      (lambda ($fpath)
		(shell-command (format "firefox \"%s\"" $fpath)))
	      $file-list))))))
   #+END_SRC
